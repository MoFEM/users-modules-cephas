/*! \page tutorial_elastic_problem VEC-0: Linear elasticity

\note Prerequisites of this tutorial include \ref basic_tutorials_mesh_generation_2d and \ref basic_tutorials_poisson_homogeneous

\note High order geometry and schurs complement are present in the current code but outside the scope of this tutorial refer to \ref tutorial_plastic_problem

<br>

\note Intended learning outcome:
- general structure of a program developed using MoFEM
- idea of [Simple Interface](http://mofem.eng.gla.ac.uk/mofem/html/struct_mo_f_e_m_1_1_simple.html) in MoFEM and how to use it
- implementing vector valued problems like linear elasticity
- implementing boundary conditions specified on the part of the boundary
- developing code that can be compiled for 2D or 3D cases
- use of default forms integrators
- pushing UDOs to the *Pipeline*
- utilisation of tools to convert outputs (MOAB) and visualise them (Paraview)

\tableofcontents

The solution of the linear elasticity problem is presented in this tutorial. Lets consider an isotropic elastic cantilever beam with prescribed gravity load as presented in \ref figure1_problem_schematic "Figure 1". 

\anchor figure1_problem_schematic
\image html vec0_load_beam.png "Figure 1: Cantilever beam considered in this example." width=600px

\section tutorial_elastic_strong_form Strong form

In order to compute displacement vector field \f$\mathbf{u}\f$, every point in the beam has to satisfy balance of linear momentum and boundary conditions as follows:

\f[
\begin{align}
  \label{eq:momentum_balance}
  \begin{cases}
  \nabla \cdot \boldsymbol \sigma \left(\mathbf u(\mathbf{x}) \right) + \mathbf b =0 & \text { in }  \Omega \\
  \mathbf u(\mathbf{x}) = \bar{\mathbf{u}} & \text { on }  \partial\Omega^\mathbf{u} \\
  \boldsymbol \sigma \cdot \mathbf n = \bar {\mathbf t} & \text { on }  \partial\Omega^\mathbf{t}
\end{cases}
\end{align}
\f]

where \f$\mathbf{b}\f$ are body forces, \f$ \bar{\mathbf{u}} \f$ are fixed displacements, \f$ \bar{\mathbf{t}} \f$ is traction vector and \f$\mathbf{n}\f$ is the unit normal vector on the boundary and \f$ \boldsymbol \sigma \f$ is the Cauchy stress tensor. In case of linear elasticity, small strains are assumed whereby the stress measure is defined as: 

\f[
\begin{align}
\boldsymbol \sigma =& \mathbb D : \frac{1}{2} (\nabla \mathbf u^\text{T} + \nabla \mathbf u) 
\end{align}
\f]
where \f$ \mathbb D  \f$ is the 4th order elasticity tensor.

\section tutorial_elastic_weak_form Discretisation
Following a standard Galerkin approach as in \ref basic_tutorials_poisson_homogeneous, the governing equations are discretised into weak form as follows: 

\f[
\begin{align}
\int_{\Omega} \nabla  \delta \mathbf u  : \boldsymbol \sigma(\mathbf u) \, \mathrm d \Omega= - \int_{\Omega} \delta \mathbf u \cdot \mathbf b \, \mathrm d \Omega  + \int_{\partial{\Omega}^\mathbf t} \delta \mathbf u \cdot \bar{\mathbf t} \, \mathrm d S \quad \forall\, \delta \mathbf u \in \mathbf{H}^1_0(\Omega) 
\end{align}
\f]

To approximate displacements\f$ \mathbf u\f$ and variance of displacements\f$ \delta \mathbf u\f$, once again we will use MoFEM's hierarchical shape functions:
\f[
\begin{align}
 \mathbf u \approx   \mathbf u^{h}=\sum_{j=0}^{N-1} \phi_{j}  \bar{\mathbf{u}}_{j}, \quad \quad \delta \mathbf u \approx  \delta \mathbf u^{h}=\sum_{j=0}^{N-1} \phi_{j} \delta \bar{\mathbf{u}}_{j}
\end{align}
\f]

By substituting the above definitions into the weak form, the global system\f$ \mathbf{K U}=\mathbf{F}\f$ can be assembled, where elements contributions from every finite elements are computed as follows:

\f[
\begin{align}
\mathbf K_{i j}^{e}&=\int_{\Omega^{e}} \nabla \phi_{i}  \mathbb D  \nabla \phi_{j} \, \mathrm d \Omega  \\
\mathbf F_{i}^{e}&=\int_{\partial \Omega^{e}} \phi_{i} \mathbf t  \, \mathrm d S + \int_{\Omega^{e}} \phi_{i} \mathbf b  \, \mathrm d \Omega 
\end{align}
\f]

The Gauss quadrature is utilised to calculate the integrals. 

\section tutorial_elastic_code_dissection Implementation
In this section we will focus on the procedure to setup and solve vector-valued problems like elasticity in MoFEM using MoFEM::Simple and Form Integrators, which are template UDOs used for common operations.  
The code developed for this example can be compiled for both 2D and 3D cases by assigning the constant variable *EXECUTABLE_DIMENSION* in the *CMakeFiles.txt* prior to compilation and is used throughout the code to define the constant variable *SPACE_DIM* which is used as a template paramenter to assign the dimension of the executable.  :

\snippet users_modules/tutorials/vec-0/elastic.cpp Define dimension

Based on *SPACE_DIM* an appropriate type of elements is defined in the following snippet:

\snippet users_modules/tutorials/vec-0/elastic.cpp Define entities

The main program consists of a series of functions when invoking the function Example::runProblem():

\snippet users_modules/tutorials/vec-0/elastic.cpp Run problem

where Example::readMesh() executes the mesh reading procedure, refer to \ref basic_tutorials_mesh_generation_2d and \ref basic_tutorials_mesh_generation_3d for an introduction to mesh generation.

\subsection tutorial_elastic_problem_set_up Problem setup
The first function, Example::setupProblem() is used to setup the problem and involves adding the displacement field *U* on the entities of the mesh and determine the base function space, base, field rank and base order. For this problem We are adding displacement field *U* as both domain and a boundary field.

\snippet users_modules/tutorials/vec-0/elastic.cpp Set up problem

The space selected for displacement field U is `H1` and dimension is *SPACE_DIM* that corresponds to a vector field with *SPACE_DIM* number of coefficients.
Additionally, we define command line parameters *-base* and *-order* that specify the base and order of our base respectively with `AINSWORTH_LEGENDRE_BASE` and 2nd order selected by default.

\subsection tutorial_elastic_dirichlet Essential boundary conditions
The next function, Example::boundaryCondition() is used to apply homogeneous Dirichlet boundary conditions for our problem by utilise MoFEM's utility to remove degrees of freedom from a problem through the BcManager interface.

\snippet users_modules/tutorials/vec-0/elastic.cpp Boundary condition

For the examples considered in this tutorial, the provided meshes contain only one meshset *FIX_ALL* that will essentially fix displacements in all directions to zero. In \ref figure2_problem_fix_all "Figure 2" we show selected triangles on the face of triangles that are used to define the *FIX_ALL* meshset. While for the 2D case, we select edge elements instead.

\anchor figure2_problem_fix_all
\image html boundary_cond_canti.png "Figure 2: FIX_ALL block meshset specified on the mesh of the cantilever for 3D case. " width=300px

\subsection tutorial_elastic_pushing_operators Pushing operators to pipeline

The next function of the main program, Example::assembleSystem() is responsible for defining pipelines used to evaluate linear and bilinear forms of the system (refer to \ref User data operators table) and assembly of the global matrices and vectors.

\snippet users_modules/tutorials/vec-0/elastic.cpp Push operators to pipeline

\subsubsection tutorial_elastic_integration_rule Integration rule
The first part of this function sets and pushes the integration rule for the finite element method to the pipeline.

\snippet users_modules/tutorials/vec-0/elastic.cpp Integration rule

\subsubsection tutorial_elastic_pushing_stiffness_matrix Pushing domain stiffness matrix
The second part of this function first calculates the local elasticity tensor `addMatBlockOps` then pushes the LHS stiffness matrix using alias `OpK` to the LHS pipeline.

\snippet users_modules/tutorials/vec-0/elastic.cpp Push domain stiffness matrix to pipeline

The local elasticty tensor \f$ \mathbb D\f$ is calculate using the formula below: 
\f[
\begin{align}
\mathbb D_{ijkl} = G \left[ \delta_{ik} \delta_{jl} + \delta_{il} \delta_{jk} \right] + A (K - \frac{2}{3} G) \left[  \delta_{ij} \delta_{kl} \right]
\end{align}
\f]
where\f$ K\f$ and\f$ G\f$ are bulk and shear modulus, respectively. The coefficient\f$ A\f$ depends on the dimension of the problem, for 3D cases and plane strain formulation it is simply\f$ A = 1\f$, whereas for plane stress it takes the following form: 

\f[
\begin{align}
 A=\frac{2 G}{K+\frac{4}{3} G}
\end{align}
\f]

Using the FTensor::Index type these formulas can be directly implemented using Einstein's summation convention as shown below, within the Example::addMatBlockOps() function:

\snippet users_modules/tutorials/vec-0/elastic.cpp Calculate elasticity tensor

Note that depending on *SPACE_DIM* our code will appropriately sum over all the indices and set coefficient \f$ A \f$ for plane stress or 3D case.

The last operator `OpK` integrates the bilinear form: 

\f[
\begin{align}
 \mathbf K^e_{ij} = \int_{\Omega^e} \nabla \phi_i \mathbb D \nabla \phi_j \, \mathrm d \Omega
\end{align}
\f]

and subsequently assembles it into global system matrix \f$ \mathbf K \f$.
Note that once again, a new operator does not have to be defined as `OpK` is simply an alias to existing operator from MoFEM's repertoire. To that operator we are passing previously defined container that stores elasticity tensor \f$ \mathbb D \f$.

\snippet users_modules/tutorials/vec-0/elastic.cpp OpK

The utilised `OpGradSymTensorGrad` form integrator template of Bilinear Form has four parameters: rank of the base, rank of row field, rank of the column field and finally, the increment of elasticity tensor, which in case of homogeneous material can be set to 0.

More info about available Form Integrators can be found in \ref user_data_operators_table.

\subsubsection tutorial_elastic_internal_force_matrix Pushing internal forces

The next part of the Example::assembleSystem() function calculates the internal forces for the system which is required to enforce the boundary conditions (refer to \ref basic_tutorials_poisson_homogeneous ). For elastic problems, this requires calculating the displacement gradient \f$ \nabla \mathbf u \f$, strain \f$ \boldsymbol \varepsilon \f$ and stress \f$ \boldsymbol \sigma \f$ of the system by pushing the relevant operatiors to the RHS pipeline.
\snippet users_modules/tutorials/vec-0/elastic.cpp Push Internal forces
This is achieved by pushing a series of operators as follows:
- `OpCalculateVectorFieldGradient` computes the gradient of the obtained displacement field \f$ \nabla \mathbf u^{h}=\sum_{m=0}^{N-1} \nabla \phi_m \bar{\mathbf u}_m \f$
- `OpSymmetrizeTensor` symmetrises the previously computed gradient to compute small strain tensor \f$ \boldsymbol \varepsilon = \frac{1}{2} (\nabla \mathbf u^\text{T} + \nabla \mathbf u)  \f$
- `OpTensorTimesSymmetricTensor` is another form integrator that computes Cauchy stress:  \f$ \boldsymbol \sigma = \mathbb D : \boldsymbol \varepsilon \f$

\subsubsection tutorial_elastic_neumann Natural boundary conditions
For natural boundary conditions we will only specify simple gravity load on the entire domain. We have to push into our Domain RHS pipeline an operator that calculates the following integral: 
\f[
\begin{align}
\mathbf F_{i}^{e}&=\int_{\Omega^{e}} \phi_{i} \mathbf b \, \mathrm d V
\end{align}
\f]

This operation can be done by utilsing the `DomanRhsBc::AddFluxToPipeline` alias which applies a flux User Data Operator into RHS pipeline as shown below. 
\snippet users_modules/tutorials/vec-0/elastic.cpp Push natural boundary conditions

\subsection tutorial_elastic_solver_setup Solver setup
With appropriately defined pipelines for assembling the global system of equations \f$ \mathbf{K} \mathbf{U} = \mathbf{F} \f$, the next functions Example::solveSystem() sets up PETSc solver and calculates it directly or iteratively based on specified settings. 

\snippet users_modules/tutorials/vec-0/elastic.cpp Solve

Note that in case of simple linear problems like elasticity considered therein the above snippet will look very similar. A detailed description of each function can be found e.g. in \ref basic_tutorials_poisson_homogeneous.

\subsection tutorial_elastic_postprocessing Postprocessing pipeline
Finally, once the solver calculations are completed and solution vector is obtained, it is necessary to save the data on the visualisation mesh and compute quantities of interest like strains and stresses. In function Example::outputResults() we will define pipeline to postprocess the results and save the calculated values to the output mesh. 

\snippet users_modules/tutorials/vec-0/elastic.cpp Postprocess results

We can reuse LHS domain pipeline, for the purpose of postprocessing. The following line resets (cleans) the operators pushed previously for each pipeline.
\snippet users_modules/tutorials/vec-0/elastic.cpp Postprocess clean

In the next few lines we create various postprocessing objects including the reference mesh and lists of elements to postprocess.
\snippet users_modules/tutorials/vec-0/elastic.cpp Postprocess initialise

Then we define a series of functions including, `calculate_stress_ops`, `post_proc_domain` and `post_proc_boundary` which push the operators required to output the displacement \f$ \mathbf{u} \f$, current position \f$ \mathbf{x} \f$, strain \f$ \boldsymbol{\varepsilon} \f$ and stress \f$ \boldsymbol{\sigma} \f$ for the domain and boundary.

\section tutorial_elastic_code_run_and_post Running code and visualisation

In order to run the program that we have been discussing in this tutorial, you
will do the following steps
- First, go to the directory where the binary file named `elastic` is
  located. Depending on how you install MoFEM shown in this page \ref
  installation, going to the directory would be something similar to this 
  - For user version installation
    \code
    cd mofem_install/um_view/tutorials/vec-0/
    \endcode
  - For developer version installation
    \code
    cd mofem_install/mofem-cephas/mofem/users_modules/um-build-RelWithDebInfo-abcd1234/tutorials/vec-0
    \endcode

- Second, check the parameters in the *param_file.petsc*. These are PETSc
  parameters and you should only use parameters that are needed for a particular
  solver, in this case KSP solver. Only the following parameters should be
  uncommented
  \code
  ## Linear solver
  -ksp_type fgmres 
  -pc_type lu 
  -pc_factor_mat_solver_type mumps
  -ksp_monitor
  \endcode
- Third, in the terminal, run commands to partition the input mesh and start
  the analysis
  \code
  ./elastic_3d -file_name beam_3D.cub -order 2
  \endcode
  where the mesh is partitioned into two parts and then the
  program is run using two processors (the same number of partitions) with
  fourth order polynomial of approximation.

This will produce *out_elastic.h5m* file which we can convert using 
\code
  mbconvert out_elastic.h5m out_elastic_3D.vtk
\endcode

The file *out_elastic_3D.vtk* can be opened in Paraview. Using the filter `WarpByScalar` allows to visualise the deformation as shown in \ref figure3_output "Figure 3". 

We can also compute 2D case of the beam. In order to do that, change the below variable:
\snippet users_modules/tutorials/vec-0/elastic.cpp Define dimension

to the value equal to 2 and compile the code (in your build directory) using `make` command. You should be able then to compute 2D variant as follows
\code
  ./elastic_2d -file_name beam_2D.cub -order 2
\endcode
and generate vtk file using:
\code
  mbconvert out_elastic.h5m out_elastic_2D.vtk
\endcode


\anchor figure3_output
\image html beams_2D_3D_case.gif "Figure 3: Deformation of cantilever beams for 2D and 3D case. The color map represents displacements U." width=800px

Note that the beams, both for 2D and 3D cases experience spurious deformation at the free end. This is a known feature of small strain kinematic description. To mitigate this issue, a large strain geometrically nonlinear formulation can be used. The extension of the above tutorial to such nonlinear case can be found in \ref tutorial_nonlinear_elastic. We propose there a simple Hencky strain measure that improves the behaviour of the material experiencing large rotations.

\section tutorial_elastic_code_source_code Plain program

The full source code of the main program can be accessed below:
elastic.cpp

*/
/*! \page user_data_operators_table User data operators table

\note Work in progress. Tables not complete.

\tableofcontents

Template arguments:

- <b>BASE_DIM</b> is dimension of base function. Typically bases for L2 and
H1 spaces are scalar bases. Thus BASE_DIM is 1. Typically H-div and H-curl
bases are vectorial bases and BASE_DIM 3. For some special case could be
exceptions.

- <b>FIELD_DIM</b> is dimension of the field. We can have scalar filed, vectorial field. For example, the scalar file for scalar base function has one coefficient for base function and \em FIELD_DIM = 1. Vectorial field with scalar based in 3d has three coefficients for each base function and \em FIELD_DIM = 3. On the other hand, a vectorial field with a vectorial base has one coefficient for each base function and \em FIELD_DIM = 3, and tensorial field of rank two in 3d on vectorial base has three coefficients for each base function and \em FIELD_DIM = 9.

- <b>SPACE_DIM</b> is dismension of space. Typically used to indicate how many 
elements have a gradient of base function or field.

- <b>ASSEMBLE_TYPE</b> by this template assembly method is indicated. For example, if the assembly is to CST compressed matrix assembly type is PETSC. For some other cases, for example, integration to nested matrices, or other matrices
formats could be added and implemented.

- <b>INTEGRATION_TYPE</b> indicate method used to assembly elements. If standard numerical integration is used, then the integration type is GAUSS. Some other more sophisticated integration methods can be implemented to exploit some base functions for fast integration.

- <b>%OP</b> type of opetaor for voulme, face, edge or vertex finite element.

\section tab_user_data_op Field operators

<table>
<caption id="user_data_ops_table">Table of user data operators</caption>

<tr style="width:100%">
<th style="width:50%">Oparator 
<th style="width:50%">\hiderefs Usage 
<tr>

<td colspan="2">
<b>Scalar fields</b>
<tr>

<td>

Evaulate scalar field at integration points. 
\ref MoFEM::OpCalculateScalarFieldValues 

\f[ u^h(\pmb\xi^g) = \sum_i^N \phi^i(\pmb\xi^g) \overline{u}_i 
\f] 

where \f$u^(\pmb\xi^g)\f$ is value at integration point \f$g\f$,
\f$\phi^i(\pmb\xi^g)\f$ is value of base function \f$i\f$ at integtation point
coordinate \f$\pmb\xi^g\f$, and \f$\overline{u}_i\f$ is \f$i\f$-th degree of
freedom.


This function has a similar variant to calculate time derivative, when a time solver is used, see \ref MoFEM::OpCalculateScalarFieldValuesDot

\f[ 
\frac{\partial u^h}{\partial t}
(\pmb\xi^g) = 
\sum_i^N \phi^i(\pmb\xi^g) 
\frac{\partial \overline{u}}{\partial t}
\f]

where \f$\dot{u}^(\pmb\xi^g)\f$ is rate value at integration point \f$g\f$ and \f$\dot{\overline{u}}_i\f$ is rate of \f$i\f$-th degree of freedom. \emph Note that funtio will work only with TS solver. The numerical schem used to calulate time derivatibe depends on time solver method.

<td> 

Basic usage:
\code
auto vals_U_at_integration_pts = boost::make_shared<VectorDouble>();
pipeline_mng->getOpDomainRhsPipeline().push_back(
  new OpCalculateScalarFieldValues("U", vals_U_at_integration_pts));
\endcode

Operatutor for given field calulate valuse of scalar field at integration
points. Values are stored in for example in \em
vals_U_at_integration_pts. Then value can be accessad also
follows
\code 
auto nb_integtation_pts = vals_U_at_integration_pts->size();
auto t_val = getFTensor0FromVec((vals_U_at_integration_pts);
for(auto gg = 0;gg!=nb_integtation_pts;++gg) {
  // do somthing
  ++t_val;
}
\endcode

<tr>

<td>

Evalute scalar field gradinet

\ref MoFEM::OpCalculateScalarFieldGradient

\f[ 
{u}^h_{,j}
(\pmb\xi^g) = 
\sum_i^N \phi^i_{,j}(\pmb\xi^g) 
\overline{u}_i 
\f]

where 
\f[
\phi^i_{,j} = \left. \frac{\partial \phi^i}{\partial \xi_j} \right|_{\pmb\xi^g}
\f]

Depending on code context, derivatives are calculated in reference element on the current physical element. For most cases, the gradient is calculated on the current physical element. Then derivative of base function is interpreted as

\f[
\phi^i_{,j} = \left. \frac{\partial \phi^i}{\partial \xi_j} \frac{\partial \xi_k}{\partial x_j} \right|_{\mathbf{x}(\pmb\xi^g)}
\f]

<td>

Basic usage:
\code
constexpr int SPACE_DIM = 3;
auto grad_U_at_integration_pts = boost::make_shared<MatrixDouble>();
pipeline_mng->getOpDomainRhsPipeline().push_back(
  new OpCalculateVectorFieldValues<SPACE_DIM>("U", grad_U_at_integration_pts));
\endcode


Operatutor for given field calulate valuse of scalar field gradient at integration points. Values are stored in for example in \em
grad_U_at_integration_pts. Then value can be accessad also
follows
\code 
constexpr int FIELD_DIM = 3;
FTensor::Index<'i', FIELD_DIM> i; 
auto nb_integtation_pts = grad_U_at_integration_pts->size2();
auto t_grad = getFTensor1FromMat<FIELD_DIM>((grad_U_at_integration_pts);
for(auto gg = 0;gg!=nb_integtation_pts;++gg) {
  auto dot = t_grad(i)*t_grad(i);
  ++t_grad;
}
\endcode

<tr>

<td colspan="2">
<b>Vector fields</b>
<tr>

<td>
Evaluate vector field at integration points
\ref MoFEM::OpCalculateVectorFieldValues

\f[ 
u_j^h(\pmb\xi^g) = \sum_i^N \phi^i(\pmb\xi^g) 
\overline{u}_i^j
\f]
where \f$j\f$ is vector element index.

This function has a similar variant to calculate rates when a time solver is used; see \ref MoFEM::OpCalculateVectorFieldValuesDot, which can be used with a time solver (TS). Also is a variant to calculate accelerations, \ref MoFEM::OpCalculateVectorFieldValuesDotDot, which can be used with a second-order time solver (TS2). PETSc has currently implemented the alpha method for second-order
time differential equations.

<td>

Basic usage:
\code
constexpr int FIELD_DIM = 3;
auto vals_U_at_integration_pts = boost::make_shared<MatrixDouble>();
pipeline_mng->getOpDomainRhsPipeline().push_back(
  new OpCalculateVectorFieldValues<FIELD_DIM>("U", vals_U_at_integration_pts));
\endcode

Operatutor for given field calulate valuse of vector field at integration
points. Values are stored in for example in \em
vals_U_at_integration_pts. Then value can be accessad also
follows
\code 
constexpr int FIELD_DIM = 3;
FTensor::Index<'i', FIELD_DIM> i; 
auto nb_integtation_pts = vals_U_at_integration_pts->size2();
auto t_val = getFTensor1FromMat<FIELD_DIM>((vals_U_at_integration_pts);
for(auto gg = 0;gg!=nb_integtation_pts;++gg) {
  auto dot = t_val(i)*t_val(i);
  ++t_val;
}
\endcode

<tr>

<td>
Evaluate vector field gradient at integration points
\ref MoFEM::OpCalculateVectorFieldGradient

\f[ 
u_{jk}^h(\pmb\xi^g) = \sum_i^N \phi^i_{,k}(\pmb\xi^g) 
\overline{u}_i^{j}
\f]
where \f$j\f$ is vector element index, \f$k\f$ is derivative and \f$i\f$ is index of base function.

This function has a similar variant to calculate rates, when a time solver is used,
see \ref MoFEM::OpCalculateVectorFieldGradientDot, which can be used with 
time solver (TS).

<td>

Basic usage:
\code
constexpr int FIELD_DIM = 3;
constexpr int SPACE_DIM = 3;
auto grad_U_at_integration_pts = boost::make_shared<MatrixDouble>();
pipeline_mng->getOpDomainRhsPipeline().push_back(
  new OpCalculateVectorFieldGradient<FIELD_DIM, SPACE_DIM>("U", grad_U_at_integration_pts));
\endcode

Operatotor for given field calulate gradien of vector field at integration
points. Values are stored in for example in \em
grad_U_at_integration_pts. Then value can be accessad also
follows
\code 
constexpr int FIELD_DIM = 3;
constexpr int SPACE_DIM = 3;
FTensor::Index<'i', FIELD_DIM> i; 
FTensor::Index<'j', SPACE_DIM> j; 
constexpr auto t_kd = FTensor::Kronecker_Delta<double>();
auto nb_integtation_pts = vals_U_at_integration_pts->size2();
auto t_grad = getFTensor2FromMat<FIELD_DIM, SPACE_DIM>((grad_U_at_integration_pts);
for(auto gg = 0;gg!=nb_integtation_pts;++gg) {
  auto trace = t_grad(i,j)*t_kd(i,j);
  ++t_grad;
}
\endcode

<tr>

<td colspan="2">
<b>Tensor fields</b>
<tr>

<td>
Evaluate tensor field at integration points
\ref MoFEM::OpCalculateTensor2FieldValues

\f[ 
u_{jk}^h(\pmb\xi^g) = \sum_i^N \phi^i(\pmb\xi^g) 
\overline{u}_i^{jk}
\f]
where \f$j\f$ and \f$j\f$ tensor element (coefficient) indices.

This function has a similar variant to calculate rates, when a time solver is used,
see \ref MoFEM::OpCalculateTensor2FieldValuesDot, which can be used with 
time solver (TS). 

<td>

Basic usage:
\code
constexpr int FIELD_DIM = 3;
auto vals_U_at_integration_pts = boost::make_shared<MatrixDouble>();
pipeline_mng->getOpDomainRhsPipeline().push_back(
  new OpCalculateTensor2FieldValues<FIELD_DIM, FIELD_DIM>("U", vals_U_at_integration_pts));
\endcode

Operatutor for given field calulate valuse of tensor field at integration
points. Values are stored in for example in \em
vals_U_at_integration_pts. Then value can be accessad also
follows
\code 
constexpr int FIELD_DIM = 3;
FTensor::Index<'i', FIELD_DIM> i; 
FTensor::Index<'j', FIELD_DIM> j; 
auto nb_integtation_pts = vals_U_at_integration_pts->size2();
auto t_val = getFTensor2FromMat<FIELD_DIM, FIELD_DIM>((vals_U_at_integration_pts);
for(auto gg = 0;gg!=nb_integtation_pts;++gg) {
  auto norm = sqrt(t_val(i,j)*t_val(i,j));
  ++t_val;
}
\endcode

<tr>

<td>
Evaluate \em symmetric tensor field at integration points
\ref MoFEM::OpCalculateTensor2SymmetricFieldValues

\f[ 
u_{jk}^h(\pmb\xi^g) = \sum_i^N \phi^i(\pmb\xi^g) 
\overline{u}_i^{jk}
\f]
where \f$j\f$ and \f$j\f$ tensor element (coefficient) indices.

Note that field degree of freedom represents only symmetric coefficients, so for each base function, we have a number of DOFs given by formula (FIELD_DIM * (FIELD_DIM + 1)) / 2. For example, for 3d case, six DOFs for each base function.  

This function has a similar variant to calculate rates, when a time solver is used,
see \ref MoFEM::OpCalculateTensor2SymmetricFieldValuesDot, which can be used with a time solver (TS). 

<td>

Basic usage:
\code
constexpr int FIELD_DIM = 3;
auto vals_U_at_integration_pts = boost::make_shared<MatrixDouble>();
pipeline_mng->getOpDomainRhsPipeline().push_back(
  new OpCalculateTensor2SymmetricFieldValues<FIELD_DIM>("U", vals_U_at_integration_pts));
\endcode

Operatutor for given field calulate valuse of tensor field at integration
points. Values are stored in for example in \em
vals_U_at_integration_pts. Then value can be accessad also
follows
\code 
constexpr int FIELD_DIM = 3;
FTensor::Index<'i', FIELD_DIM> i; 
FTensor::Index<'j', FIELD_DIM> j; 
auto nb_integtation_pts = vals_U_at_integration_pts->size2();
auto t_val = getFTensor2SymmetricFromMat<FIELD_DIM>((vals_U_at_integration_pts);
for(auto gg = 0;gg!=nb_integtation_pts;++gg) {
  auto norm = sqrt(t_val(i,j)*t_val(i,j));
  ++t_val;
}
\endcode

<tr>

</table>

\note User data operators are defined in file \ref UserDataOperators.hpp

\section tab_other_data_op Other operators

<table>
<caption id="user_other_ops_table">Table of other operators</caption>

<tr style="width:100%">
<th style="width:50%">Oparator 
<th style="width:50%">\hiderefs Usage 
<tr>

<td colspan="2"> <b>Face operators</b> <tr>

<td>
Calualte jacobian inverse jacobian on face. See
\ref MoFEM::OpCalculateJacForFace and
\ref MoFEM::OpCalculateInvJacForFace

For 2d element on plane XY, jacobian is given by,
\f[
J_{ij} = \frac{\partial X_i}{\partial \xi_j},\quad i,j=0,1
\f]

\note That for 3d volume element, the operator is not implemented explicitly. In current implementation, jacobian is calculated implicitly, and derivatives of
shape functions are pushed to the current configuration.

\note For face element is uncertainty what developer do, whether it calculates problem in 2d, or do integration on the adjacent face of 3d element, or face element is embedded in 3d, i.e. solve 2 and 1/2 dimension problem. See also \ref MoFEM::OpCalculateInvJacForFaceEmbeddedIn3DSpace

<td>
%Example usage
\code
MatrixDouble jac, inv_jac;
pipeline_mng->getOpDomainRhsPipeline().push_back(
  new OpCalculateJacForFace(inv_jac));
pipeline_mng->getOpDomainRhsPipeline().push_back(
  new OpCalculateInvJacForFace(inv_jac));
\endcode
<tr>

<td>

Push face base function to physical element configuration.
\ref MoFEM::OpSetInvJacH1ForFace
This operator assumes that the face element is on the XY plane.

\f[
\frac{\partial \phi}{\partial X_i} = \frac{\partial \phi}{\partial \xi_j} J^{-1}_{ij} 
\f]

\note For face element is uncertainty what developer do, whether it calculates problem in 2d, or do integration on the adjacent face of 3d element, or face element is embedded in 3d, i.e. solve 2 and 1/2 dimension problem. See also \ref MoFEM::OpSetInvJacH1ForFaceEmbeddedIn3DSpace

<td>
%Example usage
\code
MatrixDouble jac;
pipeline_mng->getOpDomainRhsPipeline().push_back(
  new OpSetInvJacH1ForFace(inv_jac));
pipeline_mng->getOpDomainRhsPipeline().push_back(
  new OpSetInvJacH1ForFace(inv_jac));
\endcode

<tr>

<td>

Apply contravariant (Piola) transfer to Hdiv space on face \ref MoFEM::OpSetContravariantPiolaTransformFace and \ref MoFEM::OpSetContravariantPiolaTransformFaceEmbeddedIn3DSpace


Contravariant Piola transformation
\f[
\psi_i = \frac{1}{\textrm{det}(J)}J_{ij}\hat{\psi}_j\\
\frac{\partial \psi_i}{\partial \xi_j}
=
\frac{1}{\textrm{det}(J)}J_{ik}\frac{\partial \hat{\psi}_k}{\partial \xi_j}
\f]

<td>

%Example for 2d problem for face in XY space
\code
Matrix jac;
pipeline_mng->getOpDomainRhsPipeline().push_back(
    new OpCalculateJacForFace(jac));
pipeline_mng->getOpDomainRhsPipeline().push_back(
    new OpMakeHdivFromHcurl());
pipeline_mng->getOpDomainRhsPipeline().push_back(
    new OpSetContravariantPiolaTransformFace(jac))
\endcode

%Example for face emerged in 3d space. 
\code
Matrix jac;
pipeline_mng->getOpDomainRhsPipeline().push_back(
    new OpCalculateJacForFaceEmbeddedIn3DSpace(jac));
pipeline_mng->getOpDomainRhsPipeline().push_back(
     new OpCalculateInvJacForFaceEmbeddedIn3DSpace(inv_jac));
pipeline_mng->getOpDomainRhsPipeline().push_back(new OpMakeHdivFromHcurl());
pipeline_mng->getOpDomainRhsPipeline().push_back(
    new OpSetContravariantPiolaTransformFaceEmbeddedIn3DSpace(jac));
\endcode
Note, in that case problem is 2d, however surface on which PDE is solved is emerged in 3d space.

<tr>

<td>

Transform local reference derivatives of shape function to global derivatives for face \ref MoFEM::OpSetInvJacHcurlFace and MoFEM::OpSetInvJacHcurlFaceEmbeddedIn3DSpace

\f[
\frac{\partial \psi_i}{\partial X_j}= 
\frac{\partial \psi_i}{\partial \xi_k}
\frac{\partial \xi_k}{\partial X_j}
\f]

<td>

%Example for 2d problem for face in XY space
\code
Matrix jac;
pipeline_mng->getOpDomainRhsPipeline().push_back(
    new OpCalculateJacForFace(jac));
pipeline_mng->getOpDomainRhsPipeline().push_back(
    new OpMakeHdivFromHcurl());
pipeline_mng->getOpDomainRhsPipeline().push_back(
    new OpSetContravariantPiolaTransformFace(jac));
pipeline_mng->getOpDomainRhsPipeline().push_back(
    new OpSetContravariantPiolaTransformFace(jac))    
\endcode

<tr>

<td>

Make Hdiv space from Hcurl space in 2d \ref MoFEM::OpMakeHdivFromHcurl

\f[
\pmb \psi^\textrm{Hdiv} = 
\left\{ 
\psi^\textrm{Hcurl}_{1}, -\psi^\textrm{Hcurl}_{0}, 0
\right\}
\f]
where \f$\psi^\textrm{Hdiv}\f$ are base functions for H-div space. 

Note that applying function twice will transform base from H-curl space and then back to H-div space. 

<td>

%Example for 2d problem for face in XY space
\code
Matrix jac;
pipeline_mng->getOpDomainRhsPipeline().push_back(
    new OpCalculateJacForFace(jac));
pipeline_mng->getOpDomainRhsPipeline().push_back(
    new OpMakeHdivFromHcurl());
pipeline_mng->getOpDomainRhsPipeline().push_back(
    new OpSetContravariantPiolaTransformFace(jac));
pipeline_mng->getOpDomainRhsPipeline().push_back(
    new OpSetContravariantPiolaTransformFace(jac))    
\endcode

<tr>

<td>

Modify integration weights on face to take in account higher-order
geometry \ref MoFEM::OpMakeHighOrderGeometryWeightsOnFace

Suppose jacobian is not constat on the finite element, then this operator set integration weights to take into account the geometry of the finite element, that is, a case for a non-parallelepiped quad. Also, that is a case for any face element given by higher-order geometry approximation. Note that geometry in %MoFEM can be represented by an arbitrary orde approximation field.

\f[
w^g = \left(\frac{\|J(\pmb\xi^g)\|}{A}\right) W^g
\f]
where \f$w^g\f$ is wieght on update configuration, \f$W^g\f$ integration weight at intergration point \f$g\f$, at reference point \f$\pmb\xi^g\f$. \f$\|J(\pmb\xi^g)\|\f$ is determinant of the jacobian, and \f$A\f$ is area of face element.

<td>

Example 
\code
pipeline_mng->getOpDomainLhsPipeline().push_back(
    new OpMakeHighOrderGeometryWeightsOnFace());
\endcode

<tr>

<td colspan="2">
<b>Generic operators</b>
<tr>

<td>

Scale base (default L2) functions by inverses of measure of element
\ref MoFEM::OpScaleBaseBySpaceInverseOfMeasure

Scale base
\f[
\overline{\phi}^m  = \frac{1}{\mu(\Omega^e)} \phi^m
\f]
where \f$\mu(\Omega^e)\f$ is length, area or volume, depending on dimension of the finite elemen entitiy. Note that function scales also base function direvatives.

<td>

Call that functions at front of the operators, before you evaluate field on givne space, i.e. L2 space.

Example:
\code
using OpScaleL2 = MoFEM::OpScaleBaseBySpaceInverseOfMeasure<DomainEleOp>;
pipeline_mng->getOpDomainLhsPipeline().push_back(
      new OpScaleL2());
\endcode

<tr>

</table>

\note User data operators are defined in file \ref UserDataOperators.hpp

\section tab_linear_forms Linear forms

<table>
<caption id="user_linear_forms_ops_table">Table of linear from operators</caption>

<tr style="width:100%">
<th style="width:50%">Oparator 
<th style="width:50%">\hiderefs Usage 
<tr>

<td>

Integrate force term for scalar and vectorial fields
\ref MoFEM::OpSourceImpl

\f[
(v_i,f_i(\mathbf{x}))_\Omega =
\int_\Omega v_i f_i (x,y,z) 
\textrm{d}\Omega
\f]

Template arguments:
\code
using OpSource = 
  FormsIntegrators<OP>::
  Assembly<ASSEMBLE_TYPE>::
  LinearForm<INTEGRATION_TYPE>::
  OpSource<BASE_DIM, FIELD_DIM>;
\endcode

<td>

%Example usage for scalar base and scalar field:
\code
using OpDomainSource = FormsIntegrators<DomainEleOp>::Assembly<
    PETSC>::LinearForm<GAUSS>::OpSource<1, 1>;
auto fun = [](double x, double y, double z) {
  return sin(x/L)*siz(y/L)*siz(z/L);
};
pipeline_mng->getOpDomainRhsPipeline().push_back(
  new OpDomainSource("U", fun));
\endcode

%Example usage for scalar base and vector field:
\code
using OpDomainSource = FormsIntegrators<DomainEleOp>::Assembly<
    PETSC>::LinearForm<GAUSS>::OpSource<1, 3>;
auto fun = [](double x, double y, double z) {
  return FTensor::Tensor1<double>{ sin(x/L), sin(y/L), sin(z/L) };
};
pipeline_mng->getOpDomainRhsPipeline().push_back(
  new OpDomainSource("U", fun));
\endcode

%Example usage for vector base and vector field:
\code
using OpDomainSource = FormsIntegrators<DomainEleOp>::Assembly<
    PETSC>::LinearForm<GAUSS>::OpSource<3, 3>;
auto fun = [](double x, double y, double z) {
  return FTensor::Tensor1<double>{ sin(x/L), sin(y/L), sin(z/L) };
};
pipeline_mng->getOpDomainRhsPipeline().push_back(
  new OpDomainSource("U", fun));
\endcode

<tr>

</table>

\note Linear froms are defined in file LinearFormsIntegrators.hpp

\section tab_bilinear_forms Bilinear forms

<table>
<caption id="user_bilinear_forms_ops_table">Table of bilinear from operators</caption>

<tr style="width:100%">
<th style="width:50%">Oparator 
<th style="width:50%">\hiderefs Usage 
<tr>

<td>
Integrate Grad Grad operator
\ref MoFEM::OpGradGradImpl

\code
using OpDomainGradGrad = 
  FormsIntegrators<OP>::Assembly<
  ASSEMBLY_TYPE>::
  BiLinearForm<INTEGRATION_TYPE>::
  OpGradGrad<BASE_DIM, FIELD_DIM, SPACE_DIM>;
\endcode

<td>

%Example for scalar base, scalar field and 3d problem
\code
auto beta = [](double x, double y , double z) {
  return 1;
};
using OpDomainGradGrad = FormsIntegrators<DomainEleOp>::Assembly<
    PETSC>::BiLinearForm<GAUSS>::OpGradGrad<1, 1, 3>;
pipeline_mng->getOpDomainLhsPipeline().push_back(
      new OpDomainGradGrad("U", "U", beta));
\endcode
<tr>


</table>

\note Bilinear froms are defined in file BiLinearFormsIntegrators.hpp

*/
/*!\page unsaturated_flow Unsaturated flow in 2D

This tutorial deals with the usage of the \b unsaturated_2Dflow module to simulate/analyse 
the of flow water or chemical (or fluid in general) in a variably saturated matrix. The emphasis 
is not on the finite element implementation, rather it is on the preprocessor and description of how the 
code is run. 
\image html flow_rec.gif  width=600px
The presentation includes:
- An overview of the mathematical equation
- The creation of the geometry and physical groups in Gmsh
- Meshing the geometry in Gmsh 
- Executing the code and parameter input arguments 
- Converting output into vtk
- Visualizing the output in paraView

\tableofcontents


\section math_model Unsaturated flow model

The mathematical equation describing the movement of water or chemicals in a variably 
saturated matrix is usually given by Richards' model \cite{Vogel2001},

\f[
\frac{\partial \theta(h)}{\partial t} - \mathrm{div}\,[K(h)\,\mathrm{grad}\,(h - z)] = 0
\f]

where \f$h\f$ is the pressure head, \f$\theta\f$ the water (chemical) content is a function of \f$h\f$. 
The hydraulic conductivity \f$K\f$ is positive definite. The variable \f$z\f$ refers to the 
vertical distance in the case of vertical flow against the action of gravitational 
force. However, when the flow is assumed to be restricted in the horizontal plane 
(i.e., \f$z\f$ is constant), the contribution of \f$z\f$ is ignored.   

A full description of the above model requires constitutive laws for the fluid content 
\f$\theta(h)\f$ and hydraulic conductivity \f$K(h)\f$, and boundary and initial conditions. These 
constitutive laws depend on the particular material (such as the matrix and the fluid) properties under consideration.

In this example, we consider the modified van Genuchten (MVG) constitutive laws. 
The volumetric fluid content constitutive equation is given as
\f[ 
\theta(h) = \begin{cases} 
      \theta_r + \frac{\theta_m - \theta_r}{[1+(-\alpha h)^n]m}, & h < h_s\\
      \theta_s, & h\leq h_s
   \end{cases}
\f]
where \f$\theta_r\f$ and \f$\theta_s\f$,are positive material parameters referred to as residual 
and saturated fluid contents. The parameter \f$h_s\f$ is the minimal capillary pressure, 
and \f$\theta_m\f$ is a fictitious modelling parameter.  \f$\alpha\f$ and \f$n\f$ are empirical 
shape parameters. In addition, the constitutive equation for the hydraulic conductivity is given by

\f[ 
\theta(h) = \begin{cases} 
      K_s\,K_r(h), & h < h_s\\
      K_s, & h\leq h_s
   \end{cases}
\f]
where \f$K_s\f$ is the saturated hydraulic conductivity and \f$K_r\f$ is the unsaturated hydraulic 
conductivity, which is related to \f$h\f$ through the effective saturation \f$S_e\f$ (volume fraction representing 
the composition of fluid in the matrix-fluid mixture) by
\f[
K_r = S_e^\ell \bigg[ \frac{1-F(S_e)}{1-F(1)}\bigg]^2
\f]

where \f$\ell\f$ is the pore connectivity parameter usually assumed to be \f$0.5\f$, and the 
function \f$F\f$ is given by

\f[
F = \bigg[1-\bigg(\frac{\theta_s - \theta_r}{\theta_m - \theta_r}S_e\bigg)^{1/m}\bigg]^m
\f]
and the effective saturation is given by
\f[
S_e = \frac{\theta - \theta_r}{\theta_s - \theta_r}
\f]
Here \f$m = 1 - 1/n\f$, \f$n>1\f$.

The values of the parameters used in this problem represents \f$K_s = 1.0, \ell = 0.5, \theta_r = 0.045, 
\theta_s = 0.43, \theta_m = 0.43, n = 5.38, \alpha = 1.8125\f$ and \f$h_s = 0.00\f$.

The boundary conditions are divided into two (see \ref fig_1_domain "Fig 1"); one that prescribes the pressure 
head \f$h\f$ on a given part of the boundary \f$\Gamma_1\f$, the other one prescribes the flux on 
the rest of the boundary \f$\Gamma_2 = \partial\Omega - \Gamma_1\f$. Usually the second type of 
boundary condition is zero flux which corresponds to an insulation of the boundary, i.e., no 
material is coming in and out of the boundary.

The initial condition prescribes the pressure head \f$h\f$ at the beginning of the simulation, 
in this example we consider a homogeneous initial condition, i.e., \f$h = h_s\f$

\section geometry Creating the geometry
The problem considered in this tutorial is the lateral flow of a dissolvable fluid in a simple 
rectangular paper slide as shown in \ref fig_1_domain "Fig 1". Part of the boundary labeled \f$\Gamma_1\f$ 
is in contact with a source of the fluid associated with pressure head \f$h = C\f$. The rest of the boundary, i.e., 
\f$\Gamma_2\f$, is insulated. 

\anchor fig_1_domain
\image html domain.png "Figure 1: Domain and boundary decomposition" width=600px

The geometry of the paper slide \f$\Omega\f$ has been created in Gmsh, a open-source mesh generating software. Later, the 
geometry has been saved in to a .geo file that can be opened in any text editor, 
which in turn provides an alternative way of modifying it. 
 
A simple two step procedure to create this rectangular geometry is as follows: first open the Gmsh software, then go to 
\code{.bash}
File -> New -> Choose directory -> give name (e.g., paper_network.geo) -> save -> choose OpenCASCADE from the dialogue box
\endcode

\image html opencascade.png width=800px

Next, on the left click on the \b Module; this opens three branches namely \b Geometry, \b Mesh and \b Solver, then follow
\code{.bash}
Geometry -> Elementary entities -> Add -> Rectangle  
\endcode
A dialogue page appears as shown below, press "shift" key to hold position and enter X = 0, Y = 0, Z = 0 as the coordinates of 
the left corner of the rectangle and enter DX = 0.02 and DY = 0.005 as the dimensions, make sure that \b radius \b rounded is set to 0. 
Then click \b Add on the dialogue box.
\image html creat_rect1.png width=800px

 To finish creating the rectangle press "q" key to abort. Now the rectangle is created.

\image html creat_rect2.png width=800px


\section initial_boundary Physical groups

Physical groups refers to regions in the domain where various values are prescribed, for example, boundary conditions, 
initial conditions, material parameters etc. For the problem under consideration, we only need two types of physical groups, initial 
and boundary conditions. Now go back to our rectangle in Gmesh. Note that every  \b Point, \b Line or \b Plane is allocated a unique ID by Gmsh 
as it is created, automatically. To view such ID's, under the \b Tools Menu choose \b Options, and in the dialogue box that appears
press on the \b Geometry menu on the left then under \b  Visibility check \b Curve \b labels and \b Surface \b labels then close the dialogue box.

\image html option_vis.png width=800px

To create the boundary entity where pressure head \f$h\f$ is prescribed i.e., \f$\Gamma_1\f$ (Note that it is Line 4), follow
\code{.bash}
Module -> Add -> Curve
\endcode
 Give it a name on the dialogue box appearing, e.g., \b ESSENTIAL, uncheck \b Automatic \b numbering  and enter 1 in the \b Numer field. Hover the 
 the cursor over the rectangle and Click on \b Line \b 4 to select it (then its color is changed to red), and Press "e" to end selection and "q" to abort.

\image html essential.png width=800px

Next to choose the Physical Group where the initial condition is prescribed (in this case, only one initial condition which is prescribed over the entire
rectangle, i.e. Plane 1, is considered), follow  
\code{.bash}
Module -> Add -> Surface
\endcode
on the dialogue box give it a name, e.g., \b INITIAL. Select uncheck \b Automatic \b numbering and enter 2 on the \b number field, and the hover over the rectangle and 
select \b Plane \b 1, afterwards press "e" to end selection and "q" to abort.

\image html initial.png width=800px

This results in the file \b paper_network.geo
\code{.bash}
// Gmsh project created on Mon Jan 27 21:51:41 2020
SetFactory("OpenCASCADE");
Rectangle(1) = {0, 0, 0, 0.02, 0.005, 0};
Physical Surface("INITIAL", 1) = {1};
Physical Curve("ESSENTIAL", 2) = {4};
\endcode
which you can open with any text editor from which you can modify the geometry, for example, for later use we can create variables lx and ly
for dimensions of the rectangle as follows

\code{.bash}
// Gmsh project created on Mon Jan 27 21:51:41 2020
SetFactory("OpenCASCADE");
lx = 0.02;
ly = 0.005;
Rectangle(1) = {0, 0, 0, 0.02, 0.005, 0};
Physical Surface("INITIAL", 1) = {1};
Physical Curve("ESSENTIAL", 2) = {4};
\endcode

\section mesh_gen Meshing 
Creating the mesh is simple, once we have the .geo file setup correctly, you load the modified \b paper_network.geo file 
as follows 

\code{.bash}
File -> Open... -> select the file you want to load (in this case is paper_network.geo)
\endcode

Then to create the mesh,

\code{.bash}
Module -> Mesh -> 2D 
\endcode

The rectangle is the meshed into relatively coarser triangles. If you want to refine it, just press \b {Refine by splitting} (you can repeat pressing it 
as many times as required, to get to an acceptable level of refinement.) To save the resulting mesh you need to go to 

\image html mesh.png width=800px

\code{.bash}
File -> Export -> select a folder you want to save in -> give it a name , e.g., paper_network.msh -> save
\endcode
Choose \b Version \b 2 \b ASCII \b on the Format field, and press \b OK.

At this point, we have everything we need to run the programme. But there is one important ingredient that needs to be considered before we use the mesh 
in the MoFEM context. First, note that \b .msh file is not directly used by MoFEM. To convert it to a mesh file readable by MoFEM, i.e., \b .h5m format, 
we need something referred to as a configuration file of \b .cfg format, which basically contains rules to convert the \b Physical \b groups from Gmsh into 
the corresponding NODESET, SIDESET and BLOCKSET that are understandable by MoFEM. For example, for the mesh generated above the configuration 
file \b bc.cfg looks like 
\code{.bash}
[block_1] 

id=1001
add=BLOCKSET
name=ESSENTIAL


[block_2]

id=1002
add=BLOCKSET
name=INITIAL
\endcode

\section execute Executing the code
All the necessary steps to run the code are encapsulated in following bash script file \b run.sh

\code{.bash}
#!/bin/bash

if  [[ $1 = "-my_file" ]]; then
    echo "Running with input file $2 ..."
    ../../tools/add_meshsets -my_file $2 -meshsets_config bc.cfg 
else
  echo "Give the input mesh file name ..."  
  exit
fi

cp out.h5m paper_network_pre.h5m

../../tools/mofem_part -my_file paper_network_pre.h5m -output_file paper_network_final.h5m -my_nparts 1 -dim 2 -adj_dim 1

time mpirun -np 1 ./unsatu2dFlow_prob 2>&1 | tee log

rm out_*
../nonlinear_elasticity/do_vtk.sh out_*.h5m
\endcode

Among other things, the above script utilises a file named \b param_file.ptsc which contains input for the code
such as the mesh, order of approximation and parameters for \b petsc's time solver, linear/non linear solvers, preconditioner, etc. It looks like
as follows

\code{.bash}
 -order 1                      # order of approximation
 -saturated_conductivity 0.1   
 -save_every_nth_step  4       # time-steps to save output at 
 

# petsc time solver (ts) arguments
 -ts_monitor                    # to print messages about the time step computations                  
 -ts_exact_final_time stepover  # rule when to stop at the final time
 -ts_dt 0.0000005               # time step size
 -ts_final_time 0.0005          # final time
 -ts_adapt_type none            # no time-adaptivity, i.e., fixed step size
 
 # petsc linear solver arguments, fixed
 -ksp_type gmres 
 -pc_type lu 
 -pc_factor_mat_solver_type mumps 
 
 # petsc nonlinear solver arguments, no need to change them
 -snes_atol 1e-7
 -snes_rtol 1e-12 
 -snes_monitor 
 -snes_lag_jacobian 1
\endcode

Finally, the code is simply executed using the script file as

\code{.bash}
./run.sh -my_file paper_network.msh
\endcode

\section output_vis Visualizing the output

Assuming paraView is installed on your machine, open paraView and load the file \b out_level*

\code{.bash}
File -> Open... -> go to the output file directory, then select the out_level* -> OK
\endcode

the pressure head \f$h\f$ is output as \b h1, then change \b GLOBAL_ID to \b h1 in the dropdown option

\image html output12.png width=800px

press the play button to start playing through the time snapshots, for example, the snapshot at the step 106 looks 

\image html output13.png width=800px

To plot the time profile of the horizontal line through the mid-section of the rectangle 

\code{.bash}
Plot Over Line icon -> In Properties select X Axis button -> in Series Parameters field select only h1 
\endcode

Then you get

\image html overline.png width=800px

To Plot the time profile of a given point, first close the \b LineChartView1 window and delete the \b PlotOverLine1 in the \b Pipeline \b Browser \b window. Then press on
the \b Select \b Points \b On \b (d) icon at the top the \b RenderView1 window to trigger the selection

\code{.bash}
hover over the domain and select a point somewhere in the middle -> press the Plot Selection Over Time button -> select Apply -> unselect all variables except h1 in the
Propertties window
\endcode

\image html overtime.png width=800px

paraView is a powerful visualisation and analysis tool. It has reach functionalities, you may play around to get a some understanding of it.

\section Exercise 

- \b Estimating \b speed \b of \b the \b front \b of \b pressure \b head. To do this, you need a grid over in the \b RenderView of \b VTK, in which the output is lying inside it.
   and then put the \b Time at a certain point say 56. we can get the grid in the following way, on the paraView page with the output loaded, in the \b Properties view under 
   \b Annotations check \b Axis Grid and press \b Edit button next to it. A dialogue box appears, in it press the gear as shown, 
   \image html dialogue2.png width=400px
   and on the appearing dialogue box check \b Show \b Grid button and press the gear as shown,  
   \image html dialogue3.png width=400px
   now on the final dialogue box appearing check \b Show \Grid, \b Show \b Edges and \Show \b Ticks, 
   \image html dialogue4.png width=400px
   finally press \b Apply -> \b OK then close the dialogue box.  
   \image html grid.png width=800px
   (since the \b save_every_nth_step  is set at 4, it implies that output 56 means t = 56X4Xdt where dt is the time step size) then for example h1 = -0.5 is
   roughly at 0.008. Hence we effectively say that at t = 242Xdt the speed is 0.008/(242Xdt). Do this at various time steps and record the speeds. Now do the speed
   test for different values of saturated_conductivity \f$K_s\f$. And observe that how the size of \f$K_s\f$ influences the speed.

- \b Add \b more \b feature \b to \b the \b geometry. For example, a geometry consisting of two rectangles separated by an angle \f$\pi/3\f$, as shown
   \image html two_rec.png width=800px
   and the geo file \b two_rec.geo is 
   \code{.bash}
    // Gmsh project created on Mon Jan 27 21:51:41 2020
    lx = 0.02;    
    ly = 0.005;
    SetFactory("OpenCASCADE");

    Rectangle(1) = {0, 0, 0, lx, ly, 0};
    Rotate {{0, 0, 1}, {lx, ly/2, 0}, Pi/3} { Duplicata { Surface{1}; }} 
    BooleanUnion { Surface{1}; } { Surface{2}; }
    Recursive Delete { Surface{1}; Surface{2}; }

    Physical Curve("ESSENTIAL") = {8};
    Physical Surface("INITIAL") = {3};


   \endcode
   Understand what each line is about. Create the corresponding mesh and execute the code with it. Now create a geometry such as this
   \image html star_geo.png width=800px
   Create a mesh with it and run the code using the mesh. 


*/

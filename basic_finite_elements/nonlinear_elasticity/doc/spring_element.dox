/*! \page spring_element Implementation of spring element

\tableofcontents

\section spring_element_introduction Introduction

This tutorial presents the implementation of spring elements in MoFEM

\section spring_fe_formulation Finite element formulation

\section spring_implementation Implementation

In the platform of MoFEM, the implementation of user data operators (UDO) for
spring boundary conditions can be found in \ref SpringElement.cpp and
SpringElement.hpp. Particularly, the operators OpSpringKs and OpSpringFs are
developed to calculate the contribution of springs to the left-hand side (LHS)
and right-hand side (RHS) of the system of equations.

\section spring_sample_application Sample application

With the spring element developed, the boundary condition employing elastic
spring to model the interaction between the structure of interest and
surrounding environment can be applied to any existing solid problems. As a
demonstration, the following part presents how spring elements are added to the
nonlinear elasticity problem, i.e. \ref arc_length_nonlinear_elasticity.cpp, and
how the inclusion of spring boundary condition affects the responses of
the structure bearing external loads. 

\subsection spring_code_dissection Code dissection
In order to include spring element in the nonlinear elesticity problem
arc_length_nonlinear_elasticity.cpp, only following lines of code are needed to add
to the main program.

- The header files for spring element implementation are embedded in
BasicFiniteElements.hpp (directly included) and All.cpp (via CMake)
\code
    #include <BasicFiniteElements.hpp>
\endcode

- Declaration of the spring element
\code 
    // Add spring boundary condition applied on surfaces.
    // This is only declaration not implementation.
    CHKERR MetaSpringBC::addSpringElements(m_field, "SPATIAL_POSITION",
                                             "MESH_NODE_POSITIONS");
\endcode

- Set finite element for spring boundary condition
\code
    CHKERR m_field.modify_problem_add_finite_element("ELASTIC_MECHANICS",
                                                       "SPRING");
\endcode

- Implementation of spring element by creating new instances and calling
function MetaSpringBC::setSpringOperators to push operators to them
\code
    // Implementation of spring element
    // Create new instances of face elements for springs
    boost::shared_ptr<FaceElementForcesAndSourcesCore> fe_spring_lhs_ptr(
        new FaceElementForcesAndSourcesCore(m_field));
    boost::shared_ptr<FaceElementForcesAndSourcesCore> fe_spring_rhs_ptr(
        new FaceElementForcesAndSourcesCore(m_field));

    CHKERR MetaSpringBC::setSpringOperators(
        m_field, fe_spring_lhs_ptr, fe_spring_rhs_ptr, "SPATIAL_POSITION",
        "MESH_NODE_POSITIONS");
\endcode

- Loop over the elements to calculate the contribution of the
spring boundary condition to the RHS and LHS
\code
    loops_to_do_Rhs.push_back(
        SnesCtx::PairNameFEMethodPtr("SPRING", fe_spring_rhs_ptr.get()));
\endcode
\code
    loops_to_do_Mat.push_back(
        SnesCtx::PairNameFEMethodPtr("SPRING", fe_spring_lhs_ptr.get()));
\endcode


\subsection spring_numerical_example Numerical example

The 3D model and mesh of an L-shaped structure shown in \ref
figure_spring_LShape_mesh "Figure 1" is created by Cubit using the journal
script below 
\verbatim
reset
set duplicate block elements on

brick x 1 y 2 z 0.5
brick x 2 y 1 z 0.5

move curve 23  midpoint location curve 11  include_merged
unite volume all 

sideset 1 surface 3 
sideset 2 surface 12 

sideset 100  curve all 
nodeset 101 vertex all 
sideset 102  surface all

{young_modulus = 1}
{poisson_ratio = 0}
block 1 volume all 
block 1 name 'MAT_ELASTIC'
block 1 attribute count 2
block 1 attribute index 1 {young_modulus}
block 1 attribute index 2 {poisson_ratio}

# Clamp boundary condition
#create displacement  on surface 3 dof 1 dof 2 dof 3 fix 0
create pressure  on surface 12 magnitude 1 

block 2 volume 1
block 2 name "BODY_FORCES")
block 2 attribute count 4
block 2 attribute index 1 0.001.
block 2 attribute index 2 0.
block 2 attribute inde x 3 0
block 2 attribute index 4 0.

block 3 volume 1 
block 3 name "DAMPER") 
block 3 attribute count 2 
block 3 attribute index 1 1 
block 3 attribute index 2 -1 

# Spring
{spring_stiffness_1 = 0.01}
{spring_stiffness_2 = 1}
{spring_stiffness_3 = 0.01}
block 4 surface 3
block 4 name 'SPRING_BC'
block 4 attribute count 3
block 4 attribute index 1 {spring_stiffness_1}
block 4 attribute index 2 {spring_stiffness_2}
block 4 attribute index 3 {spring_stiffness_3}

volume all scheme Tetmesh
volume all size auto factor 9
mesh volume all

save as "/Users/username/mofem_install/mofem-cephas/mofem/users_modules/basic_finite_elements/nonlinear_elasticity/spring_LShape.cub" overwrite

\endverbatim

\anchor figure_spring_LShape_mesh
\image html spring_LShape_mesh.png "Figure 1: Mesh of L-shaped structure." width = 400px

In this model, the boundary condition (clamp or spring) is imposed at the
highlighted surface while pressure is applied on another surface on the right.


Comparison shown in \ref figure_nonlinear_elasticity_spring "Figure 2".

\anchor figure_nonlinear_elasticity_spring
\image html spring_comparison.png "Figure 2: Comparison of different boundary conditions." width = 600px


*/

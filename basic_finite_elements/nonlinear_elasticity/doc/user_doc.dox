/*! \page elastic_dynamics Nonlinear Elasticity

This is simple example how to run a simple problem for linear and non-linear dynamics. Is is
directed for beginners starting to work with MoFEM.

Implementation of following examples can be found in module \ref
nonlinear_elastic_elem. Stiffness matrix and internal force vector is calulated
in \ref NonlinearElasticElement, damping matrix is implemented in \ref KelvinVoigtDamper
and mass matrix is implemented in \ref ConvectiveMassElement.

\image html dam_dynamics.gif "Arch dam - erthquace load" width=700px

\tableofcontents

\section dynamic_elastic_bar Dynamic analysis of prismatic 3d bar

You can run this analysis in Jupyter notebook. First follow instruction here \ref docker_jupyter. Then select file in 
\em um_view/linear_elasticity/dam_example.ipynb

\subsection dynamic_elastic_bar_input_file Input files

Following description and line commands are in presumption that user parent
working directory is \em users_modules/basic_finite_elements/nonlinear_elasticity/examples/prismatic_bar in build directory.
All input files used in this example can be found in the example directory.

\subsection journal Journal file

Mesh file with boundary conditions, material properties can be created with Cubit journal file with prismatic bar (rod.jou),
\include users_modules/basic_finite_elements/nonlinear_elasticity/examples/prismatic_bar/rod.jou

\subsection time_history Time history data

Time data history file (rod_history.in),
\include users_modules/basic_finite_elements/nonlinear_elasticity/examples/prismatic_bar/rod_history.in
where first column represents time and second column represent time force scaling.

\subsection execution Executing code

If bar material model is NeoHookean (note that using key word KIRCHHOFF a St Venant Kirchhoff material is used)
\code
mpirun -np 4  ../../nonlinear_dynamics \
  -my_file rod.cub \
  -ts_dt 0.01 -ts_final_time 4 -ts_max_snes_failures -1  \
  -my_output_prt -1 -my_max_post_proc_ref_level 0  \
  -my_disp_order 2 -my_time_data_file rod_history.in -default_material NEOHOOKEAN 2>&1 | tee log
\endcode

If bar is made form Hooke material subjected to small strains and displacements,
\code
mpirun -np 4  ../../nonlinear_dynamics \
  -my_file rod.cub \
  -ts_dt 0.01 -ts_final_time 4 -ts_max_snes_failures -1  \
  -my_output_prt -1 -my_max_post_proc_ref_level 0  \
  -my_disp_order 2 -my_time_data_file rod_history.in -default_material HOOKE -is_linear -snes_lag_jacobian -2 2>&1 | tee log
\endcode

Notes:

- Approximation order can be set using \em -my_disp_order.

- Time integration scheme is controlled by \em -ts_type, look to PETSc manual for more details.

- If linear analysis i.e. \em -is_linear, then Jacobian can be calculated only once at 1st time step. To speed up calculations set \em -snes_lag_jacobian -2

- Resolution of post-processing mesh is set by \em -my_max_post_proc_ref_level 0. If more than 0, i.e. 1,2,... a denser post-processing mesh is generated. This results in biger size of post processing files and compromise overall efficiency.

- Using -my_output_prt -1, each time step is post-processed. In some cases
every n-th step can be save on hard-drive, then set -my_output_prt -2, if
every \em even you like to save. If option number is positive in addition
restart file is saved, this allow to kick-start calculations from last
converged step.

\subsection gnuplot Generating data for plots

Note that executing code from example above generates log file. Filtering lines
starting from key word \em Energy, data file with elastic energy,
potential energy and total energy in time can be made.

For example, data for making plots in excel, gnuplot or any other plotting
software is generated by flowing line command,
\code
awk '/Energy/ { print $3,$6,$9,$11 }' log | tee plot_data
\endcode

\subsection paraview VTK files for paraview

Running dynamic analysis out_values_1.h5m, out_values_2.h5m, ... are created
for each time step. Post-processing mesh in output fails is stored in native MoAB data format
using standard h5m.

VTK files can be generated using script located in \em users_modules/basic_finite_elements/nonlinear_elasticity/do_vtk.sh. For example
\code
../../do_vtk.sh out_values_*h5m
\endcode

\subsection time_stepping_method Selecting method for time stepping solver

In PETSc user can choose from range of implicit time stepping solvers, by setting option
\code
-ts_type type
\endcode
where avilavle types are
- \em -ts_type beuler <http://www.mcs.anl.gov/petsc/petsc-current/docs/manualpages/TS/TSBEULER.html>
- \em -ts_type theta <http://www.mcs.anl.gov/petsc/petsc-current/docs/manualpages/TS/TSTHETA.html>
- \em -ts_type alpha <http://www.mcs.anl.gov/petsc/petsc-current/docs/manualpages/TS/TSALPHA.html>

For Alpha method user can set spectral radius following petsc documentation
<http://www.mcs.anl.gov/petsc/petsc-current/docs/manualpages/TS/TSAlphaSetRadius.html>, for example
\code
-ts_alpha_radius 0.5
\endcode

\section dynamic_dam Dynamic analysis of Arch Dam

\subsection dam_input_file Input files

Following description and line commands are in presumption that user parent
working directory is \em users_modules/basic_finite_elements/nonlinear_elasticity/examples/dam in build directory.
All input files used in this example can be found in the example directory.

\subsection accelerogram Accelerogram

This is simplified analysis of dam structure subjected to earthquake. Dynamic
loads given in accelerogram are given in
\em users_modules/basic_finite_elements/nonlinear_elasticity/examples/dam/accelerogram.in
\include users_modules/basic_finite_elements/nonlinear_elasticity/examples/dam/accelerogram.in
where first columb represents time, second acceleretaion in \em x-direction,
third column acceleration in \em y-direction and last column is acceleration in
\em y-direction.

\subsection time_history_dam Time history data

For simplicity are other loads are constant in time, and time depenent laad
scaling function is in
\em users_modules/basic_finite_elements/nonlinear_elasticity/examples/dam/dam_history.in
\include users_modules/basic_finite_elements/nonlinear_elasticity/examples/dam/dam_history.in

\subsection execution_dam Executing code

Line command executing model should be run from
users_modules/basic_finite_elements/nonlinear_elasticity/examples/dam in build directory
\code
mpirun -np 4 ../../nonlinear_dynamics \
-my_file dam.h5m \
-ts_dt 0.2 \
-ts_alpha_radius 0.5 \
-ts_final_time 8 -ts_max_snes_failures -1 \
-my_time_data_file dam_history.in \
-my_accelerogram accelerogram.in \
-my_solve_at_time_zero 1 \
-my_output_prt -1 -my_max_post_proc_ref_level 0 \
-my_disp_order 2 \
-default_material HOOKE -is_linear -snes_lag_jacobian 1 \
-elastic_material_configuration block_data.in 2>&1 | tee log
\endcode

Options discussed in prismatic bar (\ref execution) apply to this case as well, in
 addition more options are introduce in this example:

- \em -my_accelerogram accelerogram file

- \em -my_time_data_file force time scaling function

- \em -my_solve_at_time_zero 1, indicate that initial static analysis is run to
calculate initial displacements.

- \em -elastic_material_configuration block_data.in, material configuration file. This
 file overwrite material parameters set in Cubit journal file

User can set material parameters or approximation order to each block defined in cubit.
\include users_modules/basic_finite_elements/nonlinear_elasticity/examples/dam/block_data.in

\subsection journal_dam Journal file

Mesh journal mesh file is shown below. Please note that at the end of the file boundary conditions,
blocks with elastic matrix, damping model and body forces are defined.

\include users_modules/basic_finite_elements/nonlinear_elasticity/examples/dam/dam.jou

*/
